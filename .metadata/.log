!SESSION 2024-03-26 16:27:48.131 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-03-26 16:27:53.924
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-03-26 16:27:54.280
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-03-26 16:29:33.874
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-03-26 16:29:42.245
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.workbench 4 0 2024-03-26 16:29:47.959
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 1
org.eclipse.core.runtime.CoreException: Failed to retrieve Windows Defender status.
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:324)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	... 4 more
!SUBENTRY 1 org.eclipse.ui.workbench 4 0 2024-03-26 16:29:47.961
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 0
java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2024-03-27 12:26:19.929 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-03-27 12:26:25.730
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-03-27 12:26:26.206
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-03-27 12:26:48.428
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-03-27 12:26:58.652
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.workbench 4 0 2024-03-27 12:28:05.659
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 1
org.eclipse.core.runtime.CoreException: Failed to retrieve Windows Defender status.
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:324)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	... 4 more
!SUBENTRY 1 org.eclipse.ui.workbench 4 0 2024-03-27 12:28:05.659
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 0
java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2024-03-27 18:20:05.228 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-03-27 18:20:08.275
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-03-27 18:20:08.641
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-03-27 18:20:14.733
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-03-27 18:20:24.957
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.workbench 4 0 2024-03-27 18:20:29.097
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 1
org.eclipse.core.runtime.CoreException: Failed to retrieve Windows Defender status.
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:324)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	... 4 more
!SUBENTRY 1 org.eclipse.ui.workbench 4 0 2024-03-27 18:20:29.098
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 0
java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2024-03-29 10:01:06.917 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-03-29 10:01:11.996
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-03-29 10:01:12.498
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-03-29 10:01:18.475
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-03-29 10:01:28.611
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.workbench 4 0 2024-03-29 10:01:30.474
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 1
org.eclipse.core.runtime.CoreException: Failed to retrieve Windows Defender status.
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:324)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	... 4 more
!SUBENTRY 1 org.eclipse.ui.workbench 4 0 2024-03-29 10:01:30.475
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 0
java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2024-03-29 17:38:01.449 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-03-29 17:38:04.666
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-03-29 17:38:05.195
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-03-29 17:38:21.007
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-03-29 17:38:31.614
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.workbench 4 0 2024-03-29 17:38:39.501
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 1
org.eclipse.core.runtime.CoreException: Failed to retrieve Windows Defender status.
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:324)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
Caused by: java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	... 4 more
!SUBENTRY 1 org.eclipse.ui.workbench 4 0 2024-03-29 17:38:39.502
!MESSAGE Failed to retrieve Windows Defender status.
!STACK 0
java.io.IOException: Process terminated with unexpected result:
Passive Mode
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.isWindowsDefenderActive(WindowsDefenderConfigurator.java:321)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.runExclusionCheck(WindowsDefenderConfigurator.java:154)
	at org.eclipse.ui.internal.WindowsDefenderConfigurator.lambda$0(WindowsDefenderConfigurator.java:101)
	at org.eclipse.core.runtime.jobs.Job$2.run(Job.java:187)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2024-04-01 10:00:39.377 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-01 10:00:44.406
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-01 10:00:44.907
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-01 10:00:49.605
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-01 10:01:00.040
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-02 11:04:59.941 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-02 11:05:03.108
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-02 11:05:03.558
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-02 11:05:07.624
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-02 11:05:17.506
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-03 11:12:43.981 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-03 11:12:47.820
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-03 11:12:48.211
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-03 11:12:52.707
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-03 11:13:02.482
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-03 18:45:53.754 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-03 18:45:58.333
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-03 18:45:58.847
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-03 18:46:03.545
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-03 18:46:14.999
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-04 10:21:42.640 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-04 10:22:11.454
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-04 10:22:11.674
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-04 10:22:15.066
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-04 10:22:22.136
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-05 10:01:04.410 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-05 10:01:08.666
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-05 10:01:09.126
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-05 10:01:14.123
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-05 10:01:25.135
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-06 16:16:55.655 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-06 16:17:43.821
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-06 16:17:48.672
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-06 16:18:01.852
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-06 16:18:14.060
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-06 23:08:34.103 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-06 23:09:15.397
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-06 23:09:16.042
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-06 23:09:21.616
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-06 23:09:32.205
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-07 00:59:54.311 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-07 00:59:57.219
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 00:59:57.720
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 01:00:02.599
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-07 01:00:15.061
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-07 01:11:23.410 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-07 01:11:28.144
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 01:11:28.616
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 01:11:34.687
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-07 01:11:43.834
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-07 15:09:58.753 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-07 15:10:05.397
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 15:10:06.670
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-07 15:10:14.071
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-07 15:10:39.157
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-08 09:50:37.368 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-08 09:50:41.624
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 09:50:42.215
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 09:50:46.815
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-08 09:50:58.055
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-08 12:15:04.364 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-08 12:15:50.276
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 12:15:50.747
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 12:15:56.084
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-08 12:16:08.317
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-08 18:25:31.312 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-08 18:25:35.629
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 18:25:36.059
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 18:25:40.911
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-08 18:25:50.297
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-08 19:05:58.309 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-08 19:06:43.551
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 19:06:43.991
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-08 19:06:50.392
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-08 19:07:01.161
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-09 11:31:42.977 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-09 11:31:46.743
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 11:31:47.113
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 11:31:52.790
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-09 11:32:03.027
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-09 18:28:12.091 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-09 18:28:55.416
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:28:55.872
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:29:02.841
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-09 18:29:08.599
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-09 18:42:35.963 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-09 18:42:37.785
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:42:38.063
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:42:40.724
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-09 18:42:46.711
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-09 18:54:25.391 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-09 18:54:27.929
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:54:28.353
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 18:54:31.405
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-09 18:54:37.097
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-09 19:13:01.565 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-09 19:13:03.500
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 19:13:03.767
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-09 19:13:09.337
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-09 19:13:14.232
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-11 13:43:26.494 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-11 13:44:25.801
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 13:44:26.360
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 13:44:31.142
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-11 13:44:40.637
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-11 20:48:03.284 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-11 20:49:27.377
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 20:49:28.194
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 20:49:35.040
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-11 20:49:46.835
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-11 20:53:26.659 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-11 20:53:31.950
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 20:53:32.359
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-11 20:53:38.990
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-11 20:53:47.339
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-12 09:45:06.133 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-12 09:45:59.156
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-12 09:45:59.489
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-12 09:47:05.039
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-12 09:47:11.601
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-14 20:48:23.191 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-14 20:49:06.916
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-14 20:49:07.358
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-14 20:49:14.952
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-14 20:49:24.705
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-15 12:19:48.541 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-15 12:20:34.616
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-15 12:20:35.086
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-15 12:21:28.348
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-15 12:21:39.262
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-16 09:53:13.715 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-16 09:54:00.092
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-16 09:54:00.474
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-16 09:54:05.315
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-16 09:54:15.235
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-17 15:55:01.575 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-17 15:55:35.279
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-17 15:55:35.719
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-17 15:55:42.323
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-17 15:55:50.792
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-18 09:44:42.764 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-18 09:44:45.416
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-18 09:44:45.997
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-18 10:57:42.432
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-18 10:58:04.514
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-19 09:40:35.654 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-19 09:41:23.778
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-19 09:41:24.030
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-19 09:41:31.398
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-19 09:41:37.738
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-20 15:31:05.388 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-20 15:32:00.151
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-20 15:32:00.926
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-20 15:34:15.122
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-20 15:34:32.466
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-21 11:26:18.951 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-21 11:26:31.633
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-21 11:26:32.886
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-21 11:27:23.305
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-21 11:27:35.928
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-21 15:56:24.821 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-21 15:57:48.574
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-21 15:57:49.399
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-21 16:04:22.418
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-21 16:04:33.497
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-22 14:11:47.008 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-22 14:12:18.191
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-22 14:12:18.440
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-22 14:12:28.698
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-22 14:12:34.435
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-22 20:57:01.187 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-22 20:58:18.708
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-22 20:58:19.151
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-22 20:58:24.530
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-22 20:58:29.999
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-23 11:05:48.789 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-23 11:06:32.706
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-23 11:06:33.072
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-23 11:06:38.476
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-23 11:06:48.733
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-24 09:58:28.415 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-24 09:59:32.464
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-24 09:59:32.931
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-24 09:59:38.408
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-24 09:59:51.147
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-24 13:00:11.664 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-24 13:01:33.380
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-24 13:01:34.192
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-24 13:01:42.094
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-24 13:01:54.126
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-25 09:42:38.366 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-25 09:43:33.032
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 09:43:33.791
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 09:43:39.809
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-25 09:43:54.344
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-25 10:46:12.178 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-25 10:46:56.626
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 10:46:57.022
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 10:47:01.526
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-25 10:47:12.331
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-25 20:26:45.539 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-25 20:26:47.040
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 20:26:47.277
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-25 20:27:11.760
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-25 20:27:20.659
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-26 13:40:38.107 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-26 13:41:23.488
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-26 13:41:23.761
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-26 13:41:28.730
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-26 13:41:35.784
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-26 14:44:42.412 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-26 14:44:45.483
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-26 14:44:45.760
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-26 14:45:11.337
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-26 14:45:16.662
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-27 15:10:37.570 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-27 15:11:21.127
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 15:11:21.641
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 15:11:29.232
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-27 15:11:43.874
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-27 16:18:03.086 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-27 16:19:20.816
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 16:19:21.591
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 16:19:29.692
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-27 16:19:41.307
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-27 16:41:25.684 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-27 16:41:28.446
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 16:41:28.933
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-27 16:42:00.324
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-27 16:42:12.849
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-28 14:42:54.934 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-28 14:43:02.626
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-28 14:43:04.848
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-28 14:43:14.166
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-28 14:43:28.909
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-28 20:53:35.394 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-28 20:53:38.267
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-28 20:53:38.814
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-28 20:54:00.425
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-28 20:54:12.196
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-29 10:58:04.792 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-29 10:58:50.210
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-29 10:58:50.446
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-29 10:58:54.073
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-29 10:59:01.471
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-04-29 16:44:30.400 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-04-29 16:45:43.807
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-04-29 16:45:44.226
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-04-29 16:45:50.283
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-04-29 16:45:56.423
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-10 10:30:06.403 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-10 10:31:13.468
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-10 10:31:13.937
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-10 10:31:20.425
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-10 10:31:31.763
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-10 15:19:30.366 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-10 15:19:33.200
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-10 15:19:33.628
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-10 15:19:37.577
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-10 15:19:47.070
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-11 17:45:31.026 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-11 17:45:35.617
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-11 17:45:36.036
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-11 17:45:45.400
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-11 17:45:55.520
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-12 13:05:59.174 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-12 13:07:01.209
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-12 13:07:01.596
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-12 13:07:49.317
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-12 13:07:55.548
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-13 13:20:51.455 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-13 13:22:19.823
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 13:22:20.724
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 13:22:28.848
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-13 13:22:40.218
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-13 16:34:25.951 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-13 16:34:30.017
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 16:34:30.569
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 16:35:22.002
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-13 16:35:34.257
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 18:24:10.691
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private ArrayList<ContactVo> select(0;)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, phoneString);
			pstmt.setString(3, address);
			pstmt.setString(4, gubun_cd);

			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE						"
					+ "	 , a.ADDRESS					" 
					+ "	 , b.GUBUN_NM					"
					+ "  FROM contact a					" 
					+ "  	 , gubun b					"
					+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 18:24:10.694
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 18:24:10.698
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 18:24:11.509
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private ArrayList<ContactVo> select()
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, phoneString);
			pstmt.setString(3, address);
			pstmt.setString(4, gubun_cd);

			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE						"
					+ "	 , a.ADDRESS					" 
					+ "	 , b.GUBUN_NM					"
					+ "  FROM contact a					" 
					+ "  	 , gubun b					"
					+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 18:24:11.511
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 18:24:11.512
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 18:24:15.501
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private ArrayList<ContactVo> select()
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, name);
			pstmt.setString(2, phoneString);
			pstmt.setString(3, address);
			pstmt.setString(4, gubun_cd);

			pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE						"
					+ "	 , a.ADDRESS					" 
					+ "	 , b.GUBUN_NM					"
					+ "  FROM contact a					" 
					+ "  	 , gubun b					"
					+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 18:24:15.507
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 18:24:15.508
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SESSION 2024-05-13 20:39:35.409 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-13 20:39:38.035
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 20:39:38.558
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 20:39:42.207
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-13 20:39:50.683
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:47:14.325
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private void ArrayList<ContactVo> select(){
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE						"
					+ "	 , a.ADDRESS					" 
					+ "	 , b.GUBUN_NM					"
					+ "  FROM contact a					" 
					+ "  	 , gubun b					"
					+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:47:14.351
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:47:14.352
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:20.339
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select()
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:20.347
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:20.355
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:22.605
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String )
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:22.610
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:22.611
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:23.958
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String type)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:23.963
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:23.976
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:26.566
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String se)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:26.569
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:26.573
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:27.294
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String sear)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:27.296
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:27.297
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:27.317
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String searc)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:27.318
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:27.319
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 20:51:28.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String searchName)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					String sql2 = "UPDATE CONTACT		" 
								+ "   SET phone = ?		" 
								+ "   	 , address = ?	"
								+ "   	 , gubun_cd = ?	" 
								+ " WHERE PHONE_ID = ?	";
					con = DBConnection.getConnection();
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
						pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
						pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
						pstmt.setString(4, keyList.get(idx - 1));

						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				String searchName = "%" + typeName + "%";
				String sql = "SELECT a.NAME						" 
							+ "	 , a.PHONE_ID					"
							+ "	 , a.PHONE						" 
							+ "	 , a.ADDRESS					"
							+ "	 , b.GUBUN_NM					" 
							+ "  FROM contact a					"
							+ "  	 , gubun b					" 
							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
							+ "   AND a.NAME LIKE ?				";
				Connection con = DBConnection.getConnection();
				try {
					PreparedStatement pstmt = con.prepareStatement(sql);
					pstmt.setString(1, searchName);
					ResultSet rs = pstmt.executeQuery();
					while (rs.next()) {
						String name = rs.getString("name");
						String phone_id = rs.getString("phone_id");
						String phone = rs.getString("phone");
						String address = rs.getString("address");
						String gubun_nm = rs.getString("gubun_nm");
						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
						contactList.put(phone_id, contact);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				} finally {
					DBConnection.closeConnection(con);
				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 20:51:28.681
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 20:51:28.682
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 21:04:45.052
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String typeName, HashMap<String, ContactVo> contactList){
		String searchName = "%" + typeName + "%";
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE_ID					"
					+ "	 , a.PHONE						" 
					+ "	 , a.ADDRESS					"
					+ "	 , b.GUBUN_NM					" 
					+ "  FROM contact a					"
					+ "  	 , gubun b					" 
					+ " WHERE a.gubun_cd = b.GUBUN_CD	"
					+ "   AND a.NAME LIKE ?				";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, searchName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone_id = rs.getString("phone_id");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.put(phone_id, contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		return contactList;
	}
	
	private int update(ArrayList<String> keyList, HashMap<String, ContactVo> contactList, int idx){
		String sql2 = "UPDATE CONTACT		" 
				+ "   SET phone = ?		" 
				+ "   	 , address = ?	"
				+ "   	 , gubun_cd = ?	" 
				+ " WHERE PHONE_ID = ?	";
	Connection con = DBConnection.getConnection();
	try {
		PreparedStatement pstmt = con.prepareStatement(sql2);
		pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
		pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
		pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
		pstmt.setString(4, keyList.get(idx - 1));

		return pstmt.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		return 0;
	} finally {
		DBConnection.closeConnection(con);
	}
	}
	
	private int delete ()
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				contactList = select(typeName, contactList);
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					update(keyList,contactList,idx);
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				select(typeName, contactList);
//				String searchName = "%" + typeName + "%";
//				String sql = "SELECT a.NAME						" 
//							+ "	 , a.PHONE_ID					"
//							+ "	 , a.PHONE						" 
//							+ "	 , a.ADDRESS					"
//							+ "	 , b.GUBUN_NM					" 
//							+ "  FROM contact a					"
//							+ "  	 , gubun b					" 
//							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
//							+ "   AND a.NAME LIKE ?				";
//				Connection con = DBConnection.getConnection();
//				try {
//					PreparedStatement pstmt = con.prepareStatement(sql);
//					pstmt.setString(1, searchName);
//					ResultSet rs = pstmt.executeQuery();
//					while (rs.next()) {
//						String name = rs.getString("name");
//						String phone_id = rs.getString("phone_id");
//						String phone = rs.getString("phone");
//						String address = rs.getString("address");
//						String gubun_nm = rs.getString("gubun_nm");
//						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
//						contactList.put(phone_id, contact);
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				} finally {
//					DBConnection.closeConnection(con);
//				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 21:04:45.053
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 21:04:45.054
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 21:05:13.973
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String typeName, HashMap<String, ContactVo> contactList){
		String searchName = "%" + typeName + "%";
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE_ID					"
					+ "	 , a.PHONE						" 
					+ "	 , a.ADDRESS					"
					+ "	 , b.GUBUN_NM					" 
					+ "  FROM contact a					"
					+ "  	 , gubun b					" 
					+ " WHERE a.gubun_cd = b.GUBUN_CD	"
					+ "   AND a.NAME LIKE ?				";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, searchName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone_id = rs.getString("phone_id");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.put(phone_id, contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		return contactList;
	}
	
	private int update(ArrayList<String> keyList, HashMap<String, ContactVo> contactList, int idx){
		String sql2 = "UPDATE CONTACT		" 
				+ "   SET phone = ?		" 
				+ "   	 , address = ?	"
				+ "   	 , gubun_cd = ?	" 
				+ " WHERE PHONE_ID = ?	";
	Connection con = DBConnection.getConnection();
	try {
		PreparedStatement pstmt = con.prepareStatement(sql2);
		pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
		pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
		pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
		pstmt.setString(4, keyList.get(idx - 1));

		return pstmt.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		return 0;
	} finally {
		DBConnection.closeConnection(con);
	}
	}
	
	private int delete (ArrayList)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				contactList = select(typeName, contactList);
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					update(keyList,contactList,idx);
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				select(typeName, contactList);
//				String searchName = "%" + typeName + "%";
//				String sql = "SELECT a.NAME						" 
//							+ "	 , a.PHONE_ID					"
//							+ "	 , a.PHONE						" 
//							+ "	 , a.ADDRESS					"
//							+ "	 , b.GUBUN_NM					" 
//							+ "  FROM contact a					"
//							+ "  	 , gubun b					" 
//							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
//							+ "   AND a.NAME LIKE ?				";
//				Connection con = DBConnection.getConnection();
//				try {
//					PreparedStatement pstmt = con.prepareStatement(sql);
//					pstmt.setString(1, searchName);
//					ResultSet rs = pstmt.executeQuery();
//					while (rs.next()) {
//						String name = rs.getString("name");
//						String phone_id = rs.getString("phone_id");
//						String phone = rs.getString("phone");
//						String address = rs.getString("address");
//						String gubun_nm = rs.getString("gubun_nm");
//						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
//						contactList.put(phone_id, contact);
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				} finally {
//					DBConnection.closeConnection(con);
//				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 21:05:13.977
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 21:05:13.979
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 21:05:14.827
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String typeName, HashMap<String, ContactVo> contactList){
		String searchName = "%" + typeName + "%";
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE_ID					"
					+ "	 , a.PHONE						" 
					+ "	 , a.ADDRESS					"
					+ "	 , b.GUBUN_NM					" 
					+ "  FROM contact a					"
					+ "  	 , gubun b					" 
					+ " WHERE a.gubun_cd = b.GUBUN_CD	"
					+ "   AND a.NAME LIKE ?				";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, searchName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone_id = rs.getString("phone_id");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.put(phone_id, contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		return contactList;
	}
	
	private int update(ArrayList<String> keyList, HashMap<String, ContactVo> contactList, int idx){
		String sql2 = "UPDATE CONTACT		" 
				+ "   SET phone = ?		" 
				+ "   	 , address = ?	"
				+ "   	 , gubun_cd = ?	" 
				+ " WHERE PHONE_ID = ?	";
	Connection con = DBConnection.getConnection();
	try {
		PreparedStatement pstmt = con.prepareStatement(sql2);
		pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
		pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
		pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
		pstmt.setString(4, keyList.get(idx - 1));

		return pstmt.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		return 0;
	} finally {
		DBConnection.closeConnection(con);
	}
	}
	
	private int delete (ArrayList<>)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				contactList = select(typeName, contactList);
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					update(keyList,contactList,idx);
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				select(typeName, contactList);
//				String searchName = "%" + typeName + "%";
//				String sql = "SELECT a.NAME						" 
//							+ "	 , a.PHONE_ID					"
//							+ "	 , a.PHONE						" 
//							+ "	 , a.ADDRESS					"
//							+ "	 , b.GUBUN_NM					" 
//							+ "  FROM contact a					"
//							+ "  	 , gubun b					" 
//							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
//							+ "   AND a.NAME LIKE ?				";
//				Connection con = DBConnection.getConnection();
//				try {
//					PreparedStatement pstmt = con.prepareStatement(sql);
//					pstmt.setString(1, searchName);
//					ResultSet rs = pstmt.executeQuery();
//					while (rs.next()) {
//						String name = rs.getString("name");
//						String phone_id = rs.getString("phone_id");
//						String phone = rs.getString("phone");
//						String address = rs.getString("address");
//						String gubun_nm = rs.getString("gubun_nm");
//						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
//						contactList.put(phone_id, contact);
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				} finally {
//					DBConnection.closeConnection(con);
//				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 21:05:14.829
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 21:05:14.830
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 21:05:15.873
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String typeName, HashMap<String, ContactVo> contactList){
		String searchName = "%" + typeName + "%";
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE_ID					"
					+ "	 , a.PHONE						" 
					+ "	 , a.ADDRESS					"
					+ "	 , b.GUBUN_NM					" 
					+ "  FROM contact a					"
					+ "  	 , gubun b					" 
					+ " WHERE a.gubun_cd = b.GUBUN_CD	"
					+ "   AND a.NAME LIKE ?				";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, searchName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone_id = rs.getString("phone_id");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.put(phone_id, contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		return contactList;
	}
	
	private int update(ArrayList<String> keyList, HashMap<String, ContactVo> contactList, int idx){
		String sql2 = "UPDATE CONTACT		" 
				+ "   SET phone = ?		" 
				+ "   	 , address = ?	"
				+ "   	 , gubun_cd = ?	" 
				+ " WHERE PHONE_ID = ?	";
	Connection con = DBConnection.getConnection();
	try {
		PreparedStatement pstmt = con.prepareStatement(sql2);
		pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
		pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
		pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
		pstmt.setString(4, keyList.get(idx - 1));

		return pstmt.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		return 0;
	} finally {
		DBConnection.closeConnection(con);
	}
	}
	
	private int delete (ArrayList<String>)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				contactList = select(typeName, contactList);
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					update(keyList,contactList,idx);
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				select(typeName, contactList);
//				String searchName = "%" + typeName + "%";
//				String sql = "SELECT a.NAME						" 
//							+ "	 , a.PHONE_ID					"
//							+ "	 , a.PHONE						" 
//							+ "	 , a.ADDRESS					"
//							+ "	 , b.GUBUN_NM					" 
//							+ "  FROM contact a					"
//							+ "  	 , gubun b					" 
//							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
//							+ "   AND a.NAME LIKE ?				";
//				Connection con = DBConnection.getConnection();
//				try {
//					PreparedStatement pstmt = con.prepareStatement(sql);
//					pstmt.setString(1, searchName);
//					ResultSet rs = pstmt.executeQuery();
//					while (rs.next()) {
//						String name = rs.getString("name");
//						String phone_id = rs.getString("phone_id");
//						String phone = rs.getString("phone");
//						String address = rs.getString("address");
//						String gubun_nm = rs.getString("gubun_nm");
//						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
//						contactList.put(phone_id, contact);
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				} finally {
//					DBConnection.closeConnection(con);
//				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 21:05:15.876
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 21:05:15.876
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2024-05-13 21:05:17.855
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package project2.lib;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.regex.Pattern;

import contact.lib.TryCatch;

/**
 * Description : DB 연락처 서비스 <br>
 * Date : 2024. 5. 13. <br>
 * History : <br>
 * - @author : Jewon <br>
 * - 날짜 : 2024. 5. 13. <br>
 * - 설명 : 최초작성 <br>
 * @version 1.0
 */
public class ContactDBService implements Contact {
	private boolean checkOverlap(String phoneString) {
		String sql = "SELECT *				" 
					+ "  FROM contact a		" 
					+ " WHERE a.PHONE LIKE ?";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, phoneString);
			ResultSet rs = pstmt.executeQuery();
			if (rs.next()) {
				DBConnection.closeConnection(con);
				return true;
			} else {
				DBConnection.closeConnection(con);
				return false;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return false;
		}
	}

	private boolean phoneCheck(String phoneString) {
		if (Pattern.matches("^010\\d{8}", phoneString)) {
			return true;
		} else {
			return false;
		}
	}

	private boolean checkGubun(String gubun_nm) {
		return gubun_nm.matches("친구|가족|회사|기타");
	}

	private String getGubun_cd(String gubun_nm) {
		String sql = "SELECT a.GUBUN_CD				" 
					+ "  FROM gubun a				"
					+ " WHERE a.GUBUN_NM LIKE ?		";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, gubun_nm);
			ResultSet rs = pstmt.executeQuery();
			rs.next();
			String gubun_cd = rs.getString("gubun_cd");
			DBConnection.closeConnection(con);
			return gubun_cd;
		} catch (SQLException e) {
			e.printStackTrace();
			DBConnection.closeConnection(con);
			return null;
		}
	}

	private int insert (ContactVo contactVo) {
		String sql = "INSERT INTO CONTACT			" 
					+ "VALUES (?,numbering(),?,?,?)	";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, contactVo.getName());
			pstmt.setString(2, contactVo.getPhone());
			pstmt.setString(3, contactVo.getAddress());
			pstmt.setString(4, contactVo.getGubun_nm());
			
			return pstmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			return 0;
		} finally {
			DBConnection.closeConnection(con);
		}
	}
	
	private ArrayList<ContactVo> select(ArrayList<ContactVo> contactList){
		String sql = "SELECT a.NAME						" 
				+ "	 , a.PHONE						"
				+ "	 , a.ADDRESS					" 
				+ "	 , b.GUBUN_NM					"
				+ "  FROM contact a					" 
				+ "  	 , gubun b					"
				+ " WHERE a.GUBUN_CD = b.GUBUN_CD 	";
		Connection con = DBConnection.getConnection();
		PreparedStatement pstmt;
		try {
			pstmt = con.prepareStatement(sql);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.add(contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
			return contactList;
		}
	
	private HashMap<String, ContactVo> select(String typeName, HashMap<String, ContactVo> contactList){
		String searchName = "%" + typeName + "%";
		String sql = "SELECT a.NAME						" 
					+ "	 , a.PHONE_ID					"
					+ "	 , a.PHONE						" 
					+ "	 , a.ADDRESS					"
					+ "	 , b.GUBUN_NM					" 
					+ "  FROM contact a					"
					+ "  	 , gubun b					" 
					+ " WHERE a.gubun_cd = b.GUBUN_CD	"
					+ "   AND a.NAME LIKE ?				";
		Connection con = DBConnection.getConnection();
		try {
			PreparedStatement pstmt = con.prepareStatement(sql);
			pstmt.setString(1, searchName);
			ResultSet rs = pstmt.executeQuery();
			while (rs.next()) {
				String name = rs.getString("name");
				String phone_id = rs.getString("phone_id");
				String phone = rs.getString("phone");
				String address = rs.getString("address");
				String gubun_nm = rs.getString("gubun_nm");
				ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
				contactList.put(phone_id, contact);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBConnection.closeConnection(con);
		}
		return contactList;
	}
	
	private int update(ArrayList<String> keyList, HashMap<String, ContactVo> contactList, int idx){
		String sql2 = "UPDATE CONTACT		" 
				+ "   SET phone = ?		" 
				+ "   	 , address = ?	"
				+ "   	 , gubun_cd = ?	" 
				+ " WHERE PHONE_ID = ?	";
	Connection con = DBConnection.getConnection();
	try {
		PreparedStatement pstmt = con.prepareStatement(sql2);
		pstmt.setString(1, contactList.get(keyList.get(idx - 1)).getPhone());
		pstmt.setString(2, contactList.get(keyList.get(idx - 1)).getAddress());
		pstmt.setString(3, getGubun_cd(contactList.get(keyList.get(idx - 1)).getGubun_nm()));
		pstmt.setString(4, keyList.get(idx - 1));

		return pstmt.executeUpdate();
	} catch (SQLException e) {
		e.printStackTrace();
		return 0;
	} finally {
		DBConnection.closeConnection(con);
	}
	}
	
	private int delete (ArrayList<String> keyList)
	
	@Override
	public void printMenu() {
		System.out.println();
		System.out.println("==========================\n" + " 다음 메뉴 중 하나를 선택하세요. \n" + "==========================");
		System.out.println("1. 회원 추가\n" + "2. 회원 목록 보기\n" + "3. 회원 정보 수정하기\n" + "4. 회원 삭제\n" + "5. 종료");
		System.out.print("메뉴 선택 >> ");
	}
	
	@Override
	public void addContact(Scanner scanner) {
		System.out.println("등록할 회원의 정보를 입력하세요.");
		String name;
		while (true) {
			System.out.print("이름 : ");
			name = scanner.nextLine();
			if (name.contains(" ")) {
				System.out.println("공백없이 입력해주세요.");
			} else {
				break;
			}
		}
		String phoneString;
		int phone = 0;
		while (true) {
			System.out.print("전화번호(ex : 01012345678) : ");
			phone = TryCatch.InputMismatch(phone, scanner);
			phoneString = "0" + phone;
			if (checkOverlap(phoneString)) {
				System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
			} else if (phoneCheck(phoneString)) {
				break;
			} else {
				System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
			}
		}
		System.out.print("주소 : ");
		String address = scanner.nextLine();
		String gubun_nm;
		while (true) {
			System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
			gubun_nm = scanner.nextLine();
			if (checkGubun(gubun_nm)) {
				break;
			} else {
				System.out.println("잘못 입력. 분류 예시로 입력하세요.");
			}
		}
		String gubun_cd = getGubun_cd(gubun_nm);
		ContactVo contactVo = new ContactVo(name, phoneString, address, gubun_cd);
		insert(contactVo);
	}

	@Override
	public void printContact() {
		ArrayList<ContactVo> contactList = new ArrayList<ContactVo>();
		contactList = select(contactList);
		System.out.println("총 " + contactList.size() + " 명의 회원이 저장되어 있습니다.");
		for (ContactVo i : contactList) {
			System.out.println("회원정보 : " + i);
		}
	}

	@Override
	public void updateContact(Scanner scanner) {
		while (true) {
			System.out.println("수정할 회원의 이름을 입력하세요. 수정을 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				contactList = select(typeName, contactList);
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 수정할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size() && idx > 0) {
							break;
						} else {
							System.out.println("잘못입력하셨습니다.");
						}
					}
					System.out.println("수정할 정보를 입력하세요.");
					while (true) {
						int phone = 0;
						String phoneString;
						System.out.print("전화번호(ex : 01012345678) : ");
						phone = TryCatch.InputMismatch(phone, scanner);
						phoneString = "0" + phone;
						if (contactList.get(keyList.get(idx - 1)).getPhone().equals(phoneString)) {
							break;
						} else {
							if (checkOverlap(phoneString)) {
								System.out.println("중복된 전화번호입니다. 다시 입력해주세요.");
							} else if (phoneCheck(phoneString)) {
								contactList.get(keyList.get(idx - 1)).setPhone(phoneString);
								break;
							} else {
								System.out.println("형식이 잘못된 번호입니다. 다시 입력해주세요.");
							}
						}
					}

					System.out.print("주소: ");
					contactList.get(keyList.get(idx - 1)).setAddress(scanner.nextLine());
					while (true) {
						System.out.print("분류(ex : 가족, 친구, 회사, 기타) : ");
						contactList.get(keyList.get(idx - 1)).setGubun_nm(scanner.nextLine());
						if (checkGubun(contactList.get(keyList.get(idx - 1)).getGubun_nm())) {
							break;
						} else {
							System.out.println("잘못 입력. 분류 예시로 입력하세요.");
						}
					}
					update(keyList,contactList,idx);
					System.out.println("수정이 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}

	@Override
	public void removeContact(Scanner scanner) {
		while (true) {
			System.out.println("삭제할 회원의 이름을 입력하세요. 삭제를 안 하려면 '취소'를 입력해주세요.");
			System.out.print("이름 : ");
			String typeName = scanner.nextLine();
			if (!typeName.equals("취소")) {
				HashMap<String, ContactVo> contactList = new HashMap<>();
				select(typeName, contactList);
//				String searchName = "%" + typeName + "%";
//				String sql = "SELECT a.NAME						" 
//							+ "	 , a.PHONE_ID					"
//							+ "	 , a.PHONE						" 
//							+ "	 , a.ADDRESS					"
//							+ "	 , b.GUBUN_NM					" 
//							+ "  FROM contact a					"
//							+ "  	 , gubun b					" 
//							+ " WHERE a.gubun_cd = b.GUBUN_CD	"
//							+ "   AND a.NAME LIKE ?				";
//				Connection con = DBConnection.getConnection();
//				try {
//					PreparedStatement pstmt = con.prepareStatement(sql);
//					pstmt.setString(1, searchName);
//					ResultSet rs = pstmt.executeQuery();
//					while (rs.next()) {
//						String name = rs.getString("name");
//						String phone_id = rs.getString("phone_id");
//						String phone = rs.getString("phone");
//						String address = rs.getString("address");
//						String gubun_nm = rs.getString("gubun_nm");
//						ContactVo contact = new ContactVo(name, phone, address, gubun_nm);
//						contactList.put(phone_id, contact);
//					}
//				} catch (SQLException e) {
//					e.printStackTrace();
//				} finally {
//					DBConnection.closeConnection(con);
//				}
				ArrayList<String> keyList = new ArrayList<String>();
				if (contactList.size() != 0) {
					System.out.println("총 " + contactList.size() + "개의 목록이 검색되었습니다.");
					System.out.println("아래 목록 중 삭제할 회원의 번호를 입력하세요.");
					int count = 0;
					for (String i : contactList.keySet()) {
						System.out.println((count + 1) + "." + contactList.get(i));
						keyList.add(i);
						count++;
					}
					int idx = -1;
					while (true) {
						System.out.print("번호 입력 >> ");
						idx = TryCatch.InputMismatch(idx, scanner);
						if (idx <= contactList.size()) {
							break;
						} else {
							System.out.println("잘못 입력하셨습니다.");
						}
					}
					con = DBConnection.getConnection();
					String sql2 = "DELETE FROM contact a" 
								+ " WHERE a.phone_id = ?";
					try {
						PreparedStatement pstmt = con.prepareStatement(sql2);
						pstmt.setString(1, keyList.get(idx - 1));
						pstmt.executeUpdate();
					} catch (SQLException e) {
						e.printStackTrace();
					} finally {
						DBConnection.closeConnection(con);
					}
					System.out.println("삭제가 완료되었습니다.");
					break;
				} else {
					System.out.println("해당하는 회원 정보가 없습니다.");
				}
			} else {
				break;
			}
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2024-05-13 21:05:17.859
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2024-05-13 21:05:17.863
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:3434)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:725)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3477)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1521)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:603)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:245)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:585)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1137)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:169)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:93)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:742)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:808)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1311)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SESSION 2024-05-13 21:35:19.356 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-13 21:35:23.112
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 21:35:23.746
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-13 21:35:29.069
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-13 21:35:37.368
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-14 17:23:41.648 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-14 17:23:44.187
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-14 17:23:44.444
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-14 17:23:48.272
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-14 17:24:00.347
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-16 11:53:58.486 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-16 11:54:58.226
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-16 11:54:58.687
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-16 11:55:03.679
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-16 11:55:15.093
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-16 17:03:24.972 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-16 17:05:05.376
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-16 17:05:06.014
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-16 17:05:16.320
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-16 17:05:22.333
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.e4.ui.workbench 4 2 2024-05-16 19:03:31.254
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.e4.ui.workbench".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.expressions.IEvaluationContext.getDefaultVariable()" because "this.evalContext" is null
	at org.eclipse.ui.internal.handlers.LegacyHandlerService.getCurrentState(LegacyHandlerService.java:564)
	at org.eclipse.egit.ui.internal.selection.SelectionUtils.getEvaluationContext(SelectionUtils.java:534)
	at org.eclipse.egit.ui.internal.selection.SelectionUtils.getStructuredSelection(SelectionUtils.java:237)
	at org.eclipse.egit.ui.internal.selection.RepositorySourceProvider.selectionChanged(RepositorySourceProvider.java:90)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.notifyListeners(SelectionService.java:266)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.handleSelectionChanged(SelectionService.java:98)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.lambda$0(SelectionService.java:72)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$1.run(SelectionAggregator.java:123)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.notifyListeners(SelectionAggregator.java:120)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$5.lambda$0(SelectionAggregator.java:220)
	at org.eclipse.e4.core.contexts.RunAndTrack.runExternalCode(RunAndTrack.java:59)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$5.changed(SelectionAggregator.java:220)
	at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.update(TrackableComputationExt.java:105)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.runAndTrack(EclipseContext.java:340)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.track(SelectionAggregator.java:205)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.setPart(SelectionAggregator.java:114)
	at jdk.internal.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.contexts.ContextObjectSupplier$ContextInjectionListener.update(ContextObjectSupplier.java:95)
	at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.update(TrackableComputationExt.java:103)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.processScheduled(EclipseContext.java:358)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.dispose(EclipseContext.java:181)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.clearContext(PartRenderingEngine.java:982)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:955)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:889)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.disposeWidget(ElementReferenceRenderer.java:113)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:934)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:889)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:2076)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1717)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$5(WorkbenchWindow.java:1741)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1741)
	at org.eclipse.ui.internal.Workbench$11.run(Workbench.java:1125)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:1108)
	at org.eclipse.ui.internal.Workbench.lambda$4(Workbench.java:1409)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1409)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1385)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1714)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$5(WorkbenchWindow.java:1741)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1741)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1750)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$2(WorkbenchWindow.java:505)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.lambda$4(WBWRenderer.java:572)
	at org.eclipse.swt.events.ShellListener$2.shellClosed(ShellListener.java:102)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:102)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Decorations.closeWidget(Decorations.java:269)
	at org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1550)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(Native Method)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:508)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4845)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(Native Method)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:508)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4845)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1042)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:152)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:639)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:546)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:173)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:208)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:143)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:109)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:439)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:271)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:651)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:588)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1459)

!ENTRY org.eclipse.e4.ui.workbench 4 0 2024-05-16 19:03:31.261
!MESSAGE Cannot invoke "org.eclipse.core.expressions.IEvaluationContext.getDefaultVariable()" because "this.evalContext" is null
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.core.expressions.IEvaluationContext.getDefaultVariable()" because "this.evalContext" is null
	at org.eclipse.ui.internal.handlers.LegacyHandlerService.getCurrentState(LegacyHandlerService.java:564)
	at org.eclipse.egit.ui.internal.selection.SelectionUtils.getEvaluationContext(SelectionUtils.java:534)
	at org.eclipse.egit.ui.internal.selection.SelectionUtils.getStructuredSelection(SelectionUtils.java:237)
	at org.eclipse.egit.ui.internal.selection.RepositorySourceProvider.selectionChanged(RepositorySourceProvider.java:90)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.notifyListeners(SelectionService.java:266)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.handleSelectionChanged(SelectionService.java:98)
	at org.eclipse.ui.internal.e4.compatibility.SelectionService.lambda$0(SelectionService.java:72)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$1.run(SelectionAggregator.java:123)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.notifyListeners(SelectionAggregator.java:120)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$5.lambda$0(SelectionAggregator.java:220)
	at org.eclipse.e4.core.contexts.RunAndTrack.runExternalCode(RunAndTrack.java:59)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator$5.changed(SelectionAggregator.java:220)
	at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.update(TrackableComputationExt.java:105)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.runAndTrack(EclipseContext.java:340)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.track(SelectionAggregator.java:205)
	at org.eclipse.e4.ui.internal.workbench.SelectionAggregator.setPart(SelectionAggregator.java:114)
	at jdk.internal.reflect.GeneratedMethodAccessor50.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.contexts.ContextObjectSupplier$ContextInjectionListener.update(ContextObjectSupplier.java:95)
	at org.eclipse.e4.core.internal.contexts.TrackableComputationExt.update(TrackableComputationExt.java:103)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.processScheduled(EclipseContext.java:358)
	at org.eclipse.e4.core.internal.contexts.EclipseContext.dispose(EclipseContext.java:181)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.clearContext(PartRenderingEngine.java:982)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:955)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:889)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.workbench.renderers.swt.ElementReferenceRenderer.disposeWidget(ElementReferenceRenderer.java:113)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:934)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:889)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.safeRemoveGui(PartRenderingEngine.java:896)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:857)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.removeGui(PartRenderingEngine.java:841)
	at org.eclipse.ui.internal.WorkbenchWindow.hardClose(WorkbenchWindow.java:2076)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1717)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$5(WorkbenchWindow.java:1741)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1741)
	at org.eclipse.ui.internal.Workbench$11.run(Workbench.java:1125)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:47)
	at org.eclipse.ui.internal.Workbench.busyClose(Workbench.java:1108)
	at org.eclipse.ui.internal.Workbench.lambda$4(Workbench.java:1409)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1409)
	at org.eclipse.ui.internal.Workbench.close(Workbench.java:1385)
	at org.eclipse.ui.internal.WorkbenchWindow.busyClose(WorkbenchWindow.java:1714)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$5(WorkbenchWindow.java:1741)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1741)
	at org.eclipse.ui.internal.WorkbenchWindow.close(WorkbenchWindow.java:1750)
	at org.eclipse.ui.internal.WorkbenchWindow.lambda$2(WorkbenchWindow.java:505)
	at org.eclipse.e4.ui.workbench.renderers.swt.WBWRenderer.lambda$4(WBWRenderer.java:572)
	at org.eclipse.swt.events.ShellListener$2.shellClosed(ShellListener.java:102)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:102)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4274)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1090)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1075)
	at org.eclipse.swt.widgets.Decorations.closeWidget(Decorations.java:269)
	at org.eclipse.swt.widgets.Decorations.WM_CLOSE(Decorations.java:1550)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4746)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(Native Method)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:508)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4845)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DefWindowProc(Native Method)
	at org.eclipse.swt.widgets.Shell.callWindowProc(Shell.java:508)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4845)
	at org.eclipse.swt.widgets.Canvas.windowProc(Canvas.java:340)
	at org.eclipse.swt.widgets.Decorations.windowProc(Decorations.java:1478)
	at org.eclipse.swt.widgets.Shell.windowProc(Shell.java:2305)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5039)
	at org.eclipse.swt.internal.win32.OS.DispatchMessage(Native Method)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3658)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1151)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1042)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:152)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:639)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:546)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:173)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:208)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:143)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:109)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:439)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:271)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:651)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:588)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1459)
!SESSION 2024-05-17 13:46:24.607 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-17 13:47:31.412
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 13:47:32.078
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 13:53:32.004
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-17 13:53:38.974
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-17 20:35:52.532 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-17 20:36:37.046
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 20:36:39.007
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 20:36:44.750
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-17 20:36:55.213
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-17 20:59:04.006 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-17 20:59:06.716
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 20:59:07.210
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-17 20:59:12.531
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-17 20:59:21.036
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-24 17:03:44.216 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-24 17:04:59.132
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-24 17:05:00.172
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-24 17:05:33.365
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-24 17:05:46.579
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-05-31 16:08:25.724 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.10
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-05-31 16:09:55.616
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-05-31 16:09:56.333
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-05-31 16:10:02.816
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-05-31 16:10:13.475
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-08-13 17:58:14.672 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.11
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-08-13 17:58:52.277
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-08-13 17:58:52.561
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-08-13 17:58:57.212
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-08-13 17:59:07.239
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2024-08-14 15:12:13.789 -----------------------------------------------
eclipse.buildId=4.31.0.20240307-1200
java.version=17.0.11
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=ko_KR
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.emf.ecore 2 0 2024-08-14 15:12:53.401
!MESSAGE Both 'org.eclipse.jst.j2ee.core' and 'org.eclipse.jst.j2ee.core' register a package for 'application.xmi'

!ENTRY ch.qos.logback.classic 1 0 2024-08-14 15:12:53.779
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2024-08-14 15:12:58.984
!MESSAGE Logback config file: C:\big18\java\workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.6.0.20240217-1525.xml

!ENTRY org.eclipse.egit.ui 2 0 2024-08-14 15:13:06.924
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\jewon'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
